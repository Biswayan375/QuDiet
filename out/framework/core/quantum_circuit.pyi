from _typeshed import Incomplete
from framework.circuit_library.standard_gates.cx import CXGate as CXGate
from framework.circuit_library.standard_gates.h import HGate as HGate
from framework.circuit_library.standard_gates.i import IGate as IGate
from framework.circuit_library.standard_gates.measurement import Measurement as Measurement
from framework.circuit_library.standard_gates.x import XGate as XGate
from framework.circuit_library.standard_gates.z import ZGate as ZGate
from framework.core.init_states import InitState as InitState
from framework.core.moment import Moment as Moment
from framework.core.operator_flow import OperatorFlow as OperatorFlow
from typing import Literal, Optional, Union

class QuantumCircuit:
    qregs: Incomplete
    cregs: Incomplete
    name: Incomplete
    init_states: Incomplete
    op_flow: Incomplete
    def __init__(self, qregs: Union[tuple[int, int], list[int]], cregs: Optional[int] = ..., name: Optional[str] = ..., init_states: Optional[list[int]] = ...) -> None: ...
    def get_circuit_config(self) -> None: ...
    def h(self, qreg: int, dims: Optional[int] = ...) -> bool: ...
    def x(self, qreg: int, dims: Optional[int] = ...) -> bool: ...
    def z(self, qreg: int, dims: Optional[int] = ...) -> bool: ...
    def cx(self, acting_on: tuple[int, int], plus: int, dims: Optional[int] = ...) -> bool: ...
    def measure(self, qreg: int) -> NotImplementedError: ...
    def measure_all(self) -> Literal[True]: ...
    def run(self): ...
    def print_opflow_list(self) -> None: ...
